import csv
import sys
from collections import defaultdict

def calculate_percentage(covered, missed):
    """Calcula percentual de cobertura."""
    total = covered + missed
    return (covered / total * 100) if total > 0 else 0

def analyze_coverage(csv_file):
    """Analisa o relat√≥rio de cobertura JaCoCo e gera estat√≠sticas detalhadas."""

    # Dicion√°rios para armazenar dados por pacote
    package_stats = defaultdict(lambda: {
        'instruction_missed': 0, 'instruction_covered': 0,
        'branch_missed': 0, 'branch_covered': 0,
        'line_missed': 0, 'line_covered': 0,
        'method_missed': 0, 'method_covered': 0,
        'class_missed': 0, 'class_covered': 0,
        'classes': []
    })

    # Totais globais
    total_instruction_missed = 0
    total_instruction_covered = 0
    total_branch_missed = 0
    total_branch_covered = 0
    total_line_missed = 0
    total_line_covered = 0
    total_method_missed = 0
    total_method_covered = 0
    total_class_missed = 0
    total_class_covered = 0

    with open(csv_file, 'r') as f:
        reader = csv.DictReader(f)

        for row in reader:
            package = row['PACKAGE']
            class_name = row['CLASS']

            # Converter valores para inteiros
            instruction_missed = int(row['INSTRUCTION_MISSED'])
            instruction_covered = int(row['INSTRUCTION_COVERED'])
            branch_missed = int(row['BRANCH_MISSED'])
            branch_covered = int(row['BRANCH_COVERED'])
            line_missed = int(row['LINE_MISSED'])
            line_covered = int(row['LINE_COVERED'])
            method_missed = int(row['METHOD_MISSED'])
            method_covered = int(row['METHOD_COVERED'])

            # Calcular classes (cada linha representa uma classe)
            class_total = 1
            class_covered = 1 if (instruction_covered + branch_covered + line_covered + method_covered) > 0 else 0
            class_missed = class_total - class_covered

            # Atualizar totais globais
            total_instruction_missed += instruction_missed
            total_instruction_covered += instruction_covered
            total_branch_missed += branch_missed
            total_branch_covered += branch_covered
            total_line_missed += line_missed
            total_line_covered += line_covered
            total_method_missed += method_missed
            total_method_covered += method_covered
            total_class_missed += class_missed
            total_class_covered += class_covered

            # Atualizar estat√≠sticas por pacote
            package_stats[package]['instruction_missed'] += instruction_missed
            package_stats[package]['instruction_covered'] += instruction_covered
            package_stats[package]['branch_missed'] += branch_missed
            package_stats[package]['branch_covered'] += branch_covered
            package_stats[package]['line_missed'] += line_missed
            package_stats[package]['line_covered'] += line_covered
            package_stats[package]['method_missed'] += method_missed
            package_stats[package]['method_covered'] += method_covered
            package_stats[package]['class_missed'] += class_missed
            package_stats[package]['class_covered'] += class_covered
            package_stats[package]['classes'].append({
                'name': class_name,
                'instruction_coverage': calculate_percentage(instruction_covered, instruction_missed),
                'branch_coverage': calculate_percentage(branch_covered, branch_missed),
                'line_coverage': calculate_percentage(line_covered, line_missed),
                'method_coverage': calculate_percentage(method_covered, method_missed)
            })

    # Calcular percentuais globais
    global_stats = {
        'instruction': calculate_percentage(total_instruction_covered, total_instruction_missed),
        'branch': calculate_percentage(total_branch_covered, total_branch_missed),
        'line': calculate_percentage(total_line_covered, total_line_missed),
        'method': calculate_percentage(total_method_covered, total_method_missed),
        'class': calculate_percentage(total_class_covered, total_class_missed)
    }

    # Calcular estat√≠sticas por pacote
    package_coverage = {}
    for package, stats in package_stats.items():
        package_coverage[package] = {
            'instruction': calculate_percentage(stats['instruction_covered'], stats['instruction_missed']),
            'branch': calculate_percentage(stats['branch_covered'], stats['branch_missed']),
            'line': calculate_percentage(stats['line_covered'], stats['line_missed']),
            'method': calculate_percentage(stats['method_covered'], stats['method_missed']),
            'class': calculate_percentage(stats['class_covered'], stats['class_missed']),
            'classes_count': len(stats['classes'])
        }

    return global_stats, package_coverage, package_stats

def print_report(global_stats, package_coverage, package_stats):
    """Imprime o relat√≥rio de cobertura de forma organizada."""

    print("=== RELAT√ìRIO DE COBERTURA DE TESTES ===\n")

    print("üìä COBERTURA GERAL:")
    print(".1f")
    print(".1f")
    print(".1f")
    print(".1f")
    print(".1f")
    print()

    print("üìÅ COBERTURA POR PACOTE:")
    print("-" * 80)
    print("<30")
    print("-" * 80)

    # Ordenar pacotes por cobertura de instru√ß√µes (do menor para o maior)
    sorted_packages = sorted(package_coverage.items(),
                           key=lambda x: x[1]['instruction'],
                           reverse=False)

    for package, coverage in sorted_packages:
        classes_count = coverage['classes_count']
        print("<30")

    print()

    print("üéØ √ÅREAS QUE PRECISAM DE MAIS TESTES:")
    print("-" * 80)

    # Identificar pacotes com baixa cobertura
    low_coverage_packages = []
    for package, coverage in package_coverage.items():
        if coverage['instruction'] < 70:  # Menos de 70% de cobertura
            low_coverage_packages.append((package, coverage))

    if low_coverage_packages:
        low_coverage_packages.sort(key=lambda x: x[1]['instruction'])

        for package, coverage in low_coverage_packages:
            print(f"üì¶ {package}:")
            print(".1f")
            print(f"   üìÑ Classes no pacote: {coverage['classes_count']}")

            # Mostrar classes com baixa cobertura neste pacote
            low_coverage_classes = []
            for class_info in package_stats[package]['classes']:
                if class_info['instruction_coverage'] < 70:
                    low_coverage_classes.append(class_info)

            if low_coverage_classes:
                print("   üî¥ Classes com baixa cobertura:")
                for class_info in sorted(low_coverage_classes, key=lambda x: x['instruction_coverage'])[:5]:  # Top 5
                    print(".1f")
            print()
    else:
        print("‚úÖ Todos os pacotes t√™m cobertura adequada (>70%)")

    print("\nüí° RECOMENDA√á√ïES PARA MELHORAR A COBERTURA:")
    print("-" * 80)

    # An√°lise espec√≠fica por tipo de componente
    controller_coverage = package_coverage.get('com.deliverytech.delivery_api.controller', {})
    service_coverage = package_coverage.get('com.deliverytech.delivery_api.service', {})
    service_impl_coverage = package_coverage.get('com.deliverytech.delivery_api.service.impl', {})

    if controller_coverage.get('instruction', 100) < 80:
        print("üéÆ Controllers: Focar em testes de integra√ß√£o e casos extremos")
        print("   - Adicionar testes para valida√ß√£o de entrada")
        print("   - Testar tratamento de erros e exce√ß√µes")
        print("   - Cobrir cen√°rios de autentica√ß√£o/autoriza√ß√£o")

    if service_coverage.get('instruction', 100) < 80 or service_impl_coverage.get('instruction', 100) < 80:
        print("üîß Services: Expandir testes unit√°rios e de integra√ß√£o")
        print("   - Testar l√≥gica de neg√≥cio complexa")
        print("   - Cobrir cen√°rios de concorr√™ncia")
        print("   - Testar integra√ß√£o com reposit√≥rios")

    if global_stats['branch'] < 80:
        print("üåø Branches: Melhorar cobertura de condi√ß√µes")
        print("   - Testar caminhos alternativos no c√≥digo")
        print("   - Cobrir casos de erro e valida√ß√µes")

    print("\n‚úÖ PR√ìXIMOS PASSOS:")
    print("1. Priorizar testes para pacotes com menor cobertura")
    print("2. Adicionar testes de integra√ß√£o para controllers")
    print("3. Expandir testes unit√°rios para services")
    print("4. Melhorar cobertura de branches com testes de condi√ß√µes")
    print("5. Considerar testes de muta√ß√£o para validar qualidade")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Uso: python3 analyze_coverage_detailed.py <arquivo_csv>")
        sys.exit(1)

    csv_file = sys.argv[1]
    global_stats, package_coverage, package_stats = analyze_coverage(csv_file)
    print_report(global_stats, package_coverage, package_stats)