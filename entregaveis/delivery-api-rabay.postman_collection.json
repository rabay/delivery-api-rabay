{
  "info": {
    "_postman_id": "delivery-api-rabay-collection",
    "name": "Delivery API Rabay - Testes",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Clientes",
      "item": [
  { "name": "Criar Cliente", "event": [ { "listen": "prerequest", "script": { "exec": [ "pm.environment.set('uniqueEmail', 'cliente_' + Date.now() + '@email.com');" ] } }, { "listen": "test", "script": { "exec": [ "var json = pm.response.json();", "pm.test('Status 201 Created', function () { pm.response.to.have.status(201); });", "pm.test('Body possui id e nome', function () { pm.expect(json).to.have.property('id'); pm.expect(json).to.have.property('nome'); });", "if(json && json.id){ pm.environment.set('clienteId', json.id); }" ] } } ], "request": { "method": "POST", "header": [ { "key": "Content-Type", "value": "application/json" } ], "body": { "mode": "raw", "raw": "{\n  \"nome\": \"Novo Cliente\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"telefone\": \"11999999999\",\n  \"endereco\": \"Rua Teste, 123\"\n}" }, "url": { "raw": "http://localhost:8080/clientes", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["clientes"] } } },
  { "name": "Criar Cliente com E-mail Duplicado", "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 409 Conflict', function () { pm.response.to.have.status(409); });", "pm.test('Mensagem de erro de e-mail duplicado', function () { pm.expect(pm.response.text()).to.include('E-mail já cadastrado'); });" ] } } ], "request": { "method": "POST", "header": [ { "key": "Content-Type", "value": "application/json" } ], "body": { "mode": "raw", "raw": "{\n  \"nome\": \"Cliente Duplicado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"telefone\": \"11999999999\",\n  \"endereco\": \"Rua Teste, 123\"\n}" }, "url": { "raw": "http://localhost:8080/clientes", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["clientes"] } } },
  { "name": "Listar Clientes", "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200 OK', function () { pm.response.to.have.status(200); });", "var json = pm.response.json();", "pm.test('Body é array', function () { pm.expect(Array.isArray(json)).to.be.true; });" ] } } ], "request": { "method": "GET", "url": { "raw": "http://localhost:8080/clientes", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["clientes"] } } },
  { "name": "Buscar Cliente por ID", "event": [ { "listen": "test", "script": { "exec": [
        "pm.test('Status 200 ou 405', function () { pm.expect([200,405]).to.include(pm.response.code); });",
        "if(pm.response.code === 200){ var json = pm.response.json(); pm.test('Body possui id', function () { pm.expect(json).to.have.property('id'); }); }"
      ] } } ], "request": { "method": "GET", "url": { "raw": "http://localhost:8080/clientes/1", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["clientes", "1"] } } },
  { "name": "Atualizar Cliente", "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200 OK', function () { pm.response.to.have.status(200); });", "var json = pm.response.json();", "pm.test('Body possui nome atualizado', function () { pm.expect(json.nome).to.eql('Cliente Atualizado'); });" ] } } ], "request": { "method": "PUT", "header": [ { "key": "Content-Type", "value": "application/json" } ], "body": { "mode": "raw", "raw": "{\n  \"nome\": \"Cliente Atualizado\",\n  \"email\": \"joao@email.com\",\n  \"telefone\": \"11999999999\",\n  \"endereco\": \"Rua Atualizada, 456\"\n}" }, "url": { "raw": "http://localhost:8080/clientes/1", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["clientes", "1"] } } },
  { "name": "Criar Pedido", "request": { "method": "POST", "header": [ { "key": "Content-Type", "value": "application/json" } ], "body": { "mode": "raw", "raw": "{\n  \"clienteId\": {{clienteId}},\n  \"restauranteId\": {{restauranteId}},\n  \"enderecoEntrega\": {\n    \"rua\": \"Rua Exemplo\",\n    \"numero\": \"123\",\n    \"bairro\": \"Centro\",\n    \"cidade\": \"São Paulo\",\n    \"estado\": \"SP\",\n    \"cep\": \"01000-000\",\n    \"complemento\": \"Apto 1\"\n  },\n  \"itens\": [\n    {\n      \"produtoId\": {{produtoId}},\n      \"quantidade\": 2\n    },\n    {\n      \"produtoId\": 2,\n      \"quantidade\": 1\n    }\n  ]\n}" }, "url": { "raw": "http://localhost:8080/pedidos", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["pedidos"] } } },
  { "name": "Inativar Cliente", "request": { "method": "DELETE", "url": { "raw": "http://localhost:8080/clientes/1", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["clientes", "1"] } } }
      ]
    },
    {
      "name": "Restaurantes",
      "item": [
  { "name": "Criar Restaurante", "event": [ { "listen": "test", "script": { "exec": [ "var json = pm.response.json();", "pm.test('Status 201 Created', function () { pm.response.to.have.status(201); });", "pm.test('Body possui id e nome', function () { pm.expect(json).to.have.property('id'); pm.expect(json).to.have.property('nome'); });", "if(json && json.id){ pm.environment.set('restauranteId', json.id); } else { pm.environment.unset('restauranteId'); }" ] } } ], "request": { "method": "POST", "header": [ { "key": "Content-Type", "value": "application/json" } ], "body": { "mode": "raw", "raw": "{\n  \"nome\": \"Novo Restaurante\",\n  \"categoria\": \"Italiana\",\n  \"ativo\": true,\n  \"avaliacao\": 4.5\n}" }, "url": { "raw": "http://localhost:8080/restaurantes", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["restaurantes"] } } },
      { "name": "Listar Restaurantes", "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200 OK', function () { pm.response.to.have.status(200); });", "var json = pm.response.json();", "pm.test('Body é array', function () { pm.expect(Array.isArray(json)).to.be.true; });" ] } } ], "request": { "method": "GET", "url": { "raw": "http://localhost:8080/restaurantes", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["restaurantes"] } } },
      { "name": "Buscar Restaurante por ID", "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200 OK', function () { pm.response.to.have.status(200); });", "var json = pm.response.json();", "pm.test('Body possui id', function () { pm.expect(json).to.have.property('id'); });" ] } } ], "request": { "method": "GET", "url": { "raw": "http://localhost:8080/restaurantes/1", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["restaurantes", "1"] } } },
      { "name": "Atualizar Restaurante", "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200 OK', function () { pm.response.to.have.status(200); });", "var json = pm.response.json();", "pm.test('Body possui nome atualizado', function () { pm.expect(json.nome).to.eql('Restaurante Atualizado'); });" ] } } ], "request": { "method": "PUT", "header": [ { "key": "Content-Type", "value": "application/json" } ], "body": { "mode": "raw", "raw": "{\n  \"id\": 1,\n  \"nome\": \"Restaurante Atualizado\",\n  \"categoria\": \"Italiana\",\n  \"ativo\": true,\n  \"avaliacao\": 4.7\n}" }, "url": { "raw": "http://localhost:8080/restaurantes/1", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["restaurantes", "1"] } } },
  { "name": "Inativar Restaurante", "request": { "method": "DELETE", "url": { "raw": "http://localhost:8080/restaurantes/1", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["restaurantes", "1"] } } },
        { "name": "Buscar por Categoria", "request": { "method": "GET", "url": { "raw": "http://localhost:8080/restaurantes/categoria/Italiana", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["restaurantes", "categoria", "Italiana"] } } }
      ]
    },
    {
      "name": "Produtos",
      "item": [
  { "name": "Criar Produto", "event": [ { "listen": "prerequest", "script": { "exec": [ "console.log('restauranteId usado:', pm.environment.get('restauranteId'));" ] } }, { "listen": "test", "script": { "exec": [ "var json = pm.response.json();", "pm.test('Status 201 Created', function () { pm.response.to.have.status(201); });", "pm.test('Body possui id, nome e restaurante', function () { pm.expect(json).to.have.property('id'); pm.expect(json).to.have.property('nome'); pm.expect(json).to.have.property('restaurante'); });", "if(json && json.id){ pm.environment.set('produtoId', json.id); }" ] } } ], "request": { "method": "POST", "header": [ { "key": "Content-Type", "value": "application/json" } ], "body": { "mode": "raw", "raw": "{\n  \"nome\": \"Produto Teste\",\n  \"categoria\": \"Pizza\",\n  \"preco\": 49.90,\n  \"disponivel\": true,\n  \"restaurante\": { \"id\": {{restauranteId}} }\n}" }, "url": { "raw": "http://localhost:8080/produtos", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["produtos"] } } },
      { "name": "Listar Produtos", "request": { "method": "GET", "url": { "raw": "http://localhost:8080/produtos", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["produtos"] } } },
      { "name": "Buscar Produto por ID", "request": { "method": "GET", "url": { "raw": "http://localhost:8080/produtos/1", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["produtos", "1"] } } },
      { "name": "Atualizar Produto", "request": { "method": "PUT", "header": [ { "key": "Content-Type", "value": "application/json" } ], "body": { "mode": "raw", "raw": "{\n  \"id\": 1,\n  \"nome\": \"Produto Atualizado\",\n  \"categoria\": \"Pizza\",\n  \"disponivel\": true,\n  \"restaurante\": {\"id\": 1}\n}" }, "url": { "raw": "http://localhost:8080/produtos/1", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["produtos", "1"] } } },
      { "name": "Buscar Produtos por Restaurante", "request": { "method": "GET", "url": { "raw": "http://localhost:8080/produtos/restaurante/1", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["produtos", "restaurante", "1"] } } }
      ]
    },
    {
      "name": "Pedidos",
      "item": [
  { "name": "Criar Pedido", "event": [ { "listen": "prerequest", "script": { "exec": [ "// Garante que clienteId, restauranteId e produtoId existam; cria automaticamente se necessário", "try {", "  if(!pm.environment.get('clienteId')) {", "    pm.sendRequest({", "      url: 'http://localhost:8080/clientes',", "      method: 'POST',", "      header: { 'Content-Type': 'application/json' },", "      body: { mode: 'raw', raw: JSON.stringify({ nome: 'Cliente Auto', email: 'auto_' + Date.now() + '@example.com', telefone: '11900000000', endereco: 'Endereco automático' }) }", "    }, function (err, res) {", "      if(!err && res && res.code >= 200 && res.code < 300) { pm.environment.set('clienteId', res.json().id); console.log('clienteId criado', res.json().id); } else { console.warn('Falha ao criar cliente automático', err || (res && res.status)); }", "    });", "  }", "", "  var ensureRestauranteAndProduto = function() {", "    if(!pm.environment.get('restauranteId')) {", "      pm.sendRequest({", "        url: 'http://localhost:8080/restaurantes',", "        method: 'POST',", "        header: { 'Content-Type': 'application/json' },", "        body: { mode: 'raw', raw: JSON.stringify({ nome: 'Restaurante Auto ' + Date.now(), categoria: 'Geral', ativo: true, avaliacao: 4.0 }) }", "      }, function (err, res) {", "        if(!err && res && res.code >=200 && res.code <300) {", "          var rid = res.json().id; pm.environment.set('restauranteId', rid); console.log('restauranteId criado', rid);", "          // criar produto associado", "          pm.sendRequest({", "            url: 'http://localhost:8080/produtos',", "            method: 'POST',", "            header: { 'Content-Type': 'application/json' },", "            body: { mode: 'raw', raw: JSON.stringify({ nome: 'Produto Auto', categoria: 'Geral', preco: 9.9, disponivel: true, restaurante: { id: rid } }) }", "          }, function (err2, res2) {", "            if(!err2 && res2 && res2.code >=200 && res2.code <300) { pm.environment.set('produtoId', res2.json().id); console.log('produtoId criado', res2.json().id); } else { console.warn('Falha ao criar produto automático', err2 || (res2 && res2.status)); }", "          });", "        } else { console.warn('Falha ao criar restaurante automático', err || (res && res.status)); }", "      });", "    } else if(!pm.environment.get('produtoId')) {", "      // restaurante existe, criar produto apenas", "      var existingRid = pm.environment.get('restauranteId');", "      pm.sendRequest({", "        url: 'http://localhost:8080/produtos',", "        method: 'POST',", "        header: { 'Content-Type': 'application/json' },", "        body: { mode: 'raw', raw: JSON.stringify({ nome: 'Produto Auto', categoria: 'Geral', preco: 9.9, disponivel: true, restaurante: { id: existingRid } }) }", "      }, function (err3, res3) {", "        if(!err3 && res3 && res3.code >=200 && res3.code <300) { pm.environment.set('produtoId', res3.json().id); console.log('produtoId criado', res3.json().id); } else { console.warn('Falha ao criar produto automático', err3 || (res3 && res3.status)); }", "      });", "    }", "  };", "  ensureRestauranteAndProduto();", "} catch(e) { console.error('Erro no prerequest automatico:', e); }" ] } }, { "listen": "test", "script": { "exec": [ "var json = pm.response.json();", "pm.test('Status 201 Created', function () { pm.response.to.have.status(201); });", "pm.test('Body possui id, clienteId e status', function () { pm.expect(json).to.have.property('id'); pm.expect(json).to.have.property('cliente'); pm.expect(json).to.have.property('status'); });", "if(json && json.id){ pm.environment.set('pedidoId', json.id); }" ] } } ], "request": { "method": "POST", "header": [ { "key": "Content-Type", "value": "application/json" } ], "body": { "mode": "raw", "raw": "{\n  \"clienteId\": {{clienteId}},\n  \"restauranteId\": {{restauranteId}},\n  \"enderecoEntrega\": {\n    \"rua\": \"Rua Exemplo\",\n    \"numero\": \"123\",\n    \"bairro\": \"Centro\",\n    \"cidade\": \"São Paulo\",\n    \"estado\": \"SP\",\n    \"cep\": \"01000-000\",\n    \"complemento\": \"Apto 1\"\n  },\n  \"itens\": [\n    {\n      \"produtoId\": {{produtoId}},\n      \"quantidade\": 2\n    }\n  ]\n}" }, "url": { "raw": "http://localhost:8080/api/pedidos", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["api","pedidos"] } } },
  { "name": "Buscar Pedidos por Cliente", "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200 ou 400', function () { pm.expect([200,400]).to.include(pm.response.code); });" ] } } ], "request": { "method": "GET", "url": { "raw": "http://localhost:8080/api/pedidos/cliente/{{clienteId}}", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["api","pedidos", "cliente", "{{clienteId}}"] } } },
  { "name": "Atualizar Status do Pedido", "event": [ { "listen": "test", "script": { "exec": [ "var json = pm.response.json();", "pm.test('Status 200 OK', function () { pm.response.to.have.status(200); });", "pm.test('Status do pedido atualizado', function () { pm.expect(json.status).to.eql('ENTREGUE'); });" ] } } ], "request": { "method": "PUT", "header": [ { "key": "Content-Type", "value": "application/json" } ], "body": { "mode": "raw", "raw": "{\n  \"status\": \"ENTREGUE\"\n}" }, "url": { "raw": "http://localhost:8080/api/pedidos/{{pedidoId}}/status", "protocol": "http", "host": ["localhost"], "port": "8080", "path": ["api","pedidos", "{{pedidoId}}", "status"] } } }
      ]
    }
  ]
}
