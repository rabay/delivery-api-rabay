# Azure DevOps Pipeline para delivery-api-rabay
# Inspirado no workflow GitHub Actions build.yml e seguindo melhores práticas

trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - docs/*
      - README.md

variables:
  - name: buildConfiguration
    value: 'Release'
  - name: javaVersion
    value: '21'
  - name: artifactName
    value: 'jacoco-coverage-report'
  - name: dependencyCheckReport
    value: 'dependency-check-report'

stages:
  - stage: Build
    displayName: 'Build, Testes e Cobertura'
    jobs:
      - job: Build
        displayName: 'Build e Testes Maven'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            displayName: 'Checkout código'

          # Configuração do Java
          - task: UseJava@1
            displayName: 'Configurar Java $(javaVersion)'
            inputs:
              versionSpec: '$(javaVersion)'
              addToPath: true

          - script: chmod +x ./mvnw
            displayName: 'Permitir execução do Maven Wrapper'

          # Cache do repositório Maven
          - task: Cache@2
            displayName: 'Cache Maven local'
            inputs:
              key: 'maven | "$(Agent.OS)" | $(Build.SourcesDirectory)/pom.xml | $(Build.SourcesDirectory)/src/main/resources/application.properties'
              restoreKeys: |
                maven | "$(Agent.OS)"
              path: ~/.m2/repository

          - script: ./mvnw clean verify
            displayName: 'Build, Testes e Cobertura (Jacoco)'
            continueOnError: false

          - task: PublishCodeCoverageResults@1
            displayName: 'Publicar relatório Jacoco'
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/target/site/jacoco/jacoco.xml'
              reportDirectory: '$(System.DefaultWorkingDirectory)/target/site/jacoco'
              failIfCoverageEmpty: true

          - task: PublishBuildArtifacts@1
            displayName: 'Publicar relatório Jacoco como artefato'
            inputs:
              PathtoPublish: 'target/site/jacoco'
              ArtifactName: '$(artifactName)'
              publishLocation: 'Container'

          - stage: Security
            displayName: 'Verificação de Dependências (OWASP)'
            dependsOn: Build
            jobs:
              - job: DependencyCheck
                displayName: 'Dependency-Check OWASP'
                pool:
                  vmImage: 'ubuntu-latest'
                steps:
                  - checkout: self
                    displayName: 'Checkout código'

                  - task: dependency-check-build-task@6
                    displayName: 'OWASP Dependency-Check'
                    inputs:
                      projectName: 'delivery-api'
                      scanPath: '.'
                      format: 'HTML'
                      outDir: 'dependency-check-report'

                  - task: PublishBuildArtifacts@1
                    displayName: 'Publicar relatório Dependency-Check'
                    inputs:
                      PathtoPublish: 'dependency-check-report'
                      ArtifactName: '$(dependencyCheckReport)'
                      publishLocation: 'Container'

          - stage: DockerBuild
            displayName: 'Build Docker (Validação)'
            dependsOn: Build
            condition: succeeded()
            jobs:
              - job: DockerBuild
                displayName: 'Build da imagem Docker (sem push)'
                pool:
                  vmImage: 'ubuntu-latest'
                steps:
                  - checkout: self
                    displayName: 'Checkout código'

                  # Build Docker apenas para validação, sem push
                  - task: Docker@2
                    displayName: 'Build da imagem Docker'
                    inputs:
                      command: 'build'
                      dockerfile: 'Dockerfile'
                      tags: 'delivery-api-rabay:latest'
                      context: '.'
                      addPipelineData: false
                      addBaseImageData: false
                      push: false
